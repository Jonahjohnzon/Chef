{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar Declaration = require('../declaration');\n\nvar TransformDecl = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(TransformDecl, _Declaration);\n\n  var _super = _createSuper(TransformDecl);\n\n  function TransformDecl() {\n    _classCallCheck(this, TransformDecl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TransformDecl, [{\n    key: \"keyframeParents\",\n    value:\n    /**\n     * Recursively check all parents for @keyframes\n     */\n    function keyframeParents(decl) {\n      var parent = decl.parent;\n\n      while (parent) {\n        if (parent.type === 'atrule' && parent.name === 'keyframes') {\n          return true;\n        }\n\n        ;\n        var _parent = parent;\n        parent = _parent.parent;\n      }\n\n      return false;\n    }\n    /**\n     * Is transform contain 3D commands\n     */\n\n  }, {\n    key: \"contain3d\",\n    value: function contain3d(decl) {\n      if (decl.prop === 'transform-origin') {\n        return false;\n      }\n\n      var _iterator = _createForOfIteratorHelper(TransformDecl.functions3d),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var func = _step.value;\n\n          if (decl.value.includes(\"\".concat(func, \"(\"))) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    }\n    /**\n     * Replace rotateZ to rotate for IE 9\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(decl, prefix) {\n      decl = _get(_getPrototypeOf(TransformDecl.prototype), \"set\", this).call(this, decl, prefix);\n\n      if (prefix === '-ms-') {\n        decl.value = decl.value.replace(/rotatez/gi, 'rotate');\n      }\n\n      return decl;\n    }\n    /**\n     * Don't add prefix for IE in keyframes\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(decl, prefix, prefixes) {\n      if (prefix === '-ms-') {\n        if (!this.contain3d(decl) && !this.keyframeParents(decl)) {\n          return _get(_getPrototypeOf(TransformDecl.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n        }\n      } else if (prefix === '-o-') {\n        if (!this.contain3d(decl)) {\n          return _get(_getPrototypeOf(TransformDecl.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n        }\n      } else {\n        return _get(_getPrototypeOf(TransformDecl.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return TransformDecl;\n}(Declaration);\n\nTransformDecl.names = ['transform', 'transform-origin'];\nTransformDecl.functions3d = ['matrix3d', 'translate3d', 'translateZ', 'scale3d', 'scaleZ', 'rotate3d', 'rotateX', 'rotateY', 'perspective'];\nmodule.exports = TransformDecl;","map":{"version":3,"sources":["C:/Users/nasni/Desktop/Illumino/illumino/node_modules/autoprefixer/lib/hacks/transform-decl.js"],"names":["Declaration","require","TransformDecl","decl","parent","type","name","prop","functions3d","func","value","includes","prefix","replace","prefixes","contain3d","keyframeParents","undefined","names","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;IAEMC,a;;;;;;;;;;;;;;;;AACJ;AACF;AACA;AACE,6BAAgBC,IAAhB,EAAsB;AACpB,UAAMC,MAAN,GAAiBD,IAAjB,CAAMC,MAAN;;AACA,aAAOA,MAAP,EAAe;AACb,YAAIA,MAAM,CAACC,IAAP,KAAgB,QAAhB,IAA4BD,MAAM,CAACE,IAAP,KAAgB,WAAhD,EAA6D;AAC3D,iBAAO,IAAP;AACD;;AACD;AAJa,sBAIEF,MAJF;AAITA,QAAAA,MAJS,WAITA,MAJS;AAKd;;AACD,aAAO,KAAP;AACD;AAED;AACF;AACA;;;;WACE,mBAAUD,IAAV,EAAgB;AACd,UAAIA,IAAI,CAACI,IAAL,KAAc,kBAAlB,EAAsC;AACpC,eAAO,KAAP;AACD;;AAHa,iDAKGL,aAAa,CAACM,WALjB;AAAA;;AAAA;AAKd,4DAA4C;AAAA,cAAnCC,IAAmC;;AAC1C,cAAIN,IAAI,CAACO,KAAL,CAAWC,QAAX,WAAuBF,IAAvB,OAAJ,EAAqC;AACnC,mBAAO,IAAP;AACD;AACF;AATa;AAAA;AAAA;AAAA;AAAA;;AAWd,aAAO,KAAP;AACD;AAED;AACF;AACA;;;;WACE,aAAIN,IAAJ,EAAUS,MAAV,EAAkB;AAChBT,MAAAA,IAAI,0EAAaA,IAAb,EAAmBS,MAAnB,CAAJ;;AACA,UAAIA,MAAM,KAAK,MAAf,EAAuB;AACrBT,QAAAA,IAAI,CAACO,KAAL,GAAaP,IAAI,CAACO,KAAL,CAAWG,OAAX,CAAmB,WAAnB,EAAgC,QAAhC,CAAb;AACD;;AACD,aAAOV,IAAP;AACD;AAED;AACF;AACA;;;;WACE,gBAAOA,IAAP,EAAaS,MAAb,EAAqBE,QAArB,EAA+B;AAC7B,UAAIF,MAAM,KAAK,MAAf,EAAuB;AACrB,YAAI,CAAC,KAAKG,SAAL,CAAeZ,IAAf,CAAD,IAAyB,CAAC,KAAKa,eAAL,CAAqBb,IAArB,CAA9B,EAA0D;AACxD,2FAAoBA,IAApB,EAA0BS,MAA1B,EAAkCE,QAAlC;AACD;AACF,OAJD,MAIO,IAAIF,MAAM,KAAK,KAAf,EAAsB;AAC3B,YAAI,CAAC,KAAKG,SAAL,CAAeZ,IAAf,CAAL,EAA2B;AACzB,2FAAoBA,IAApB,EAA0BS,MAA1B,EAAkCE,QAAlC;AACD;AACF,OAJM,MAIA;AACL,yFAAoBX,IAApB,EAA0BS,MAA1B,EAAkCE,QAAlC;AACD;;AACD,aAAOG,SAAP;AACD;;;;EA3DyBjB,W;;AA8D5BE,aAAa,CAACgB,KAAd,GAAsB,CAAC,WAAD,EAAc,kBAAd,CAAtB;AAEAhB,aAAa,CAACM,WAAd,GAA4B,CAC1B,UAD0B,EAE1B,aAF0B,EAG1B,YAH0B,EAI1B,SAJ0B,EAK1B,QAL0B,EAM1B,UAN0B,EAO1B,SAP0B,EAQ1B,SAR0B,EAS1B,aAT0B,CAA5B;AAYAW,MAAM,CAACC,OAAP,GAAiBlB,aAAjB","sourcesContent":["let Declaration = require('../declaration')\n\nclass TransformDecl extends Declaration {\n  /**\n   * Recursively check all parents for @keyframes\n   */\n  keyframeParents(decl) {\n    let { parent } = decl\n    while (parent) {\n      if (parent.type === 'atrule' && parent.name === 'keyframes') {\n        return true\n      }\n      ;({ parent } = parent)\n    }\n    return false\n  }\n\n  /**\n   * Is transform contain 3D commands\n   */\n  contain3d(decl) {\n    if (decl.prop === 'transform-origin') {\n      return false\n    }\n\n    for (let func of TransformDecl.functions3d) {\n      if (decl.value.includes(`${func}(`)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Replace rotateZ to rotate for IE 9\n   */\n  set(decl, prefix) {\n    decl = super.set(decl, prefix)\n    if (prefix === '-ms-') {\n      decl.value = decl.value.replace(/rotatez/gi, 'rotate')\n    }\n    return decl\n  }\n\n  /**\n   * Don't add prefix for IE in keyframes\n   */\n  insert(decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      if (!this.contain3d(decl) && !this.keyframeParents(decl)) {\n        return super.insert(decl, prefix, prefixes)\n      }\n    } else if (prefix === '-o-') {\n      if (!this.contain3d(decl)) {\n        return super.insert(decl, prefix, prefixes)\n      }\n    } else {\n      return super.insert(decl, prefix, prefixes)\n    }\n    return undefined\n  }\n}\n\nTransformDecl.names = ['transform', 'transform-origin']\n\nTransformDecl.functions3d = [\n  'matrix3d',\n  'translate3d',\n  'translateZ',\n  'scale3d',\n  'scaleZ',\n  'rotate3d',\n  'rotateX',\n  'rotateY',\n  'perspective'\n]\n\nmodule.exports = TransformDecl\n"]},"metadata":{},"sourceType":"script"}