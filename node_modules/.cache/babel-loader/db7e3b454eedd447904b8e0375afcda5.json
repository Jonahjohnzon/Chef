{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar Declaration = require('../declaration');\n\nvar MaskComposite = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(MaskComposite, _Declaration);\n\n  var _super = _createSuper(MaskComposite);\n\n  function MaskComposite() {\n    _classCallCheck(this, MaskComposite);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MaskComposite, [{\n    key: \"insert\",\n    value:\n    /**\n     * Prefix mask-composite for webkit\n     */\n    function insert(decl, prefix, prefixes) {\n      var isCompositeProp = decl.prop === 'mask-composite';\n      var compositeValues;\n\n      if (isCompositeProp) {\n        compositeValues = decl.value.split(',');\n      } else {\n        compositeValues = decl.value.match(MaskComposite.regexp) || [];\n      }\n\n      compositeValues = compositeValues.map(function (el) {\n        return el.trim();\n      }).filter(function (el) {\n        return el;\n      });\n      var hasCompositeValues = compositeValues.length;\n      var compositeDecl;\n\n      if (hasCompositeValues) {\n        compositeDecl = this.clone(decl);\n        compositeDecl.value = compositeValues.map(function (value) {\n          return MaskComposite.oldValues[value] || value;\n        }).join(', ');\n\n        if (compositeValues.includes('intersect')) {\n          compositeDecl.value += ', xor';\n        }\n\n        compositeDecl.prop = prefix + 'mask-composite';\n      }\n\n      if (isCompositeProp) {\n        if (!hasCompositeValues) {\n          return undefined;\n        }\n\n        if (this.needCascade(decl)) {\n          compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);\n        }\n\n        return decl.parent.insertBefore(decl, compositeDecl);\n      }\n\n      var cloned = this.clone(decl);\n      cloned.prop = prefix + cloned.prop;\n\n      if (hasCompositeValues) {\n        cloned.value = cloned.value.replace(MaskComposite.regexp, '');\n      }\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      decl.parent.insertBefore(decl, cloned);\n\n      if (!hasCompositeValues) {\n        return decl;\n      }\n\n      if (this.needCascade(decl)) {\n        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      return decl.parent.insertBefore(decl, compositeDecl);\n    }\n  }]);\n\n  return MaskComposite;\n}(Declaration);\n\nMaskComposite.names = ['mask', 'mask-composite'];\nMaskComposite.oldValues = {\n  add: 'source-over',\n  subtract: 'source-out',\n  intersect: 'source-in',\n  exclude: 'xor'\n};\nMaskComposite.regexp = new RegExp(\"\\\\s+(\".concat(Object.keys(MaskComposite.oldValues).join('|'), \")\\\\b(?!\\\\))\\\\s*(?=[,])\"), 'ig');\nmodule.exports = MaskComposite;","map":{"version":3,"sources":["C:/Users/nasni/Desktop/Illumino/illumino/node_modules/autoprefixer/lib/hacks/mask-composite.js"],"names":["Declaration","require","MaskComposite","decl","prefix","prefixes","isCompositeProp","prop","compositeValues","value","split","match","regexp","map","el","trim","filter","hasCompositeValues","length","compositeDecl","clone","oldValues","join","includes","undefined","needCascade","raws","before","calcBefore","parent","insertBefore","cloned","replace","names","add","subtract","intersect","exclude","RegExp","Object","keys","module","exports"],"mappings":"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","sourcesContent":["let Declaration = require('../declaration')\n\nclass MaskComposite extends Declaration {\n  /**\n   * Prefix mask-composite for webkit\n   */\n  insert(decl, prefix, prefixes) {\n    let isCompositeProp = decl.prop === 'mask-composite'\n\n    let compositeValues\n\n    if (isCompositeProp) {\n      compositeValues = decl.value.split(',')\n    } else {\n      compositeValues = decl.value.match(MaskComposite.regexp) || []\n    }\n\n    compositeValues = compositeValues.map(el => el.trim()).filter(el => el)\n    let hasCompositeValues = compositeValues.length\n\n    let compositeDecl\n\n    if (hasCompositeValues) {\n      compositeDecl = this.clone(decl)\n      compositeDecl.value = compositeValues\n        .map(value => MaskComposite.oldValues[value] || value)\n        .join(', ')\n\n      if (compositeValues.includes('intersect')) {\n        compositeDecl.value += ', xor'\n      }\n\n      compositeDecl.prop = prefix + 'mask-composite'\n    }\n\n    if (isCompositeProp) {\n      if (!hasCompositeValues) {\n        return undefined\n      }\n\n      if (this.needCascade(decl)) {\n        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix)\n      }\n\n      return decl.parent.insertBefore(decl, compositeDecl)\n    }\n\n    let cloned = this.clone(decl)\n    cloned.prop = prefix + cloned.prop\n\n    if (hasCompositeValues) {\n      cloned.value = cloned.value.replace(MaskComposite.regexp, '')\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n\n    decl.parent.insertBefore(decl, cloned)\n\n    if (!hasCompositeValues) {\n      return decl\n    }\n\n    if (this.needCascade(decl)) {\n      compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, compositeDecl)\n  }\n}\n\nMaskComposite.names = ['mask', 'mask-composite']\n\nMaskComposite.oldValues = {\n  add: 'source-over',\n  subtract: 'source-out',\n  intersect: 'source-in',\n  exclude: 'xor'\n}\n\nMaskComposite.regexp = new RegExp(\n  `\\\\s+(${Object.keys(MaskComposite.oldValues).join(\n    '|'\n  )})\\\\b(?!\\\\))\\\\s*(?=[,])`,\n  'ig'\n)\n\nmodule.exports = MaskComposite\n"]},"metadata":{},"sourceType":"script"}