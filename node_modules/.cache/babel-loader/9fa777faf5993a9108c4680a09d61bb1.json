{"ast":null,"code":"var _slicedToArray = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar Declaration = require('../declaration');\n\nvar utils = require('./grid-utils');\n\nvar GridRowColumn = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(GridRowColumn, _Declaration);\n\n  var _super = _createSuper(GridRowColumn);\n\n  function GridRowColumn() {\n    _classCallCheck(this, GridRowColumn);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridRowColumn, [{\n    key: \"insert\",\n    value:\n    /**\n     * Translate grid-row / grid-column to separate -ms- prefixed properties\n     */\n    function insert(decl, prefix, prefixes) {\n      if (prefix !== '-ms-') return _get(_getPrototypeOf(GridRowColumn.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n      var values = utils.parse(decl);\n\n      var _utils$translate = utils.translate(values, 0, 1),\n          _utils$translate2 = _slicedToArray(_utils$translate, 2),\n          start = _utils$translate2[0],\n          span = _utils$translate2[1];\n\n      var hasStartValueSpan = values[0] && values[0].includes('span');\n\n      if (hasStartValueSpan) {\n        span = values[0].join('').replace(/\\D/g, '');\n      }\n\n      ;\n      [[decl.prop, start], [\"\".concat(decl.prop, \"-span\"), span]].forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            prop = _ref2[0],\n            value = _ref2[1];\n\n        utils.insertDecl(decl, prop, value);\n      });\n      return undefined;\n    }\n  }]);\n\n  return GridRowColumn;\n}(Declaration);\n\nGridRowColumn.names = ['grid-row', 'grid-column'];\nmodule.exports = GridRowColumn;","map":{"version":3,"sources":["C:/Users/nasni/Desktop/Illumino/illumino/node_modules/autoprefixer/lib/hacks/grid-row-column.js"],"names":["Declaration","require","utils","GridRowColumn","decl","prefix","prefixes","values","parse","translate","start","span","hasStartValueSpan","includes","join","replace","prop","forEach","value","insertDecl","undefined","names","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;IAEME,a;;;;;;;;;;;;;;;;AACJ;AACF;AACA;AACE,oBAAOC,IAAP,EAAaC,MAAb,EAAqBC,QAArB,EAA+B;AAC7B,UAAID,MAAM,KAAK,MAAf,EAAuB,iFAAoBD,IAApB,EAA0BC,MAA1B,EAAkCC,QAAlC;AAEvB,UAAIC,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAYJ,IAAZ,CAAb;;AACA,6BAAoBF,KAAK,CAACO,SAAN,CAAgBF,MAAhB,EAAwB,CAAxB,EAA2B,CAA3B,CAApB;AAAA;AAAA,UAAKG,KAAL;AAAA,UAAYC,IAAZ;;AAEA,UAAIC,iBAAiB,GAAGL,MAAM,CAAC,CAAD,CAAN,IAAaA,MAAM,CAAC,CAAD,CAAN,CAAUM,QAAV,CAAmB,MAAnB,CAArC;;AAEA,UAAID,iBAAJ,EAAuB;AACrBD,QAAAA,IAAI,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAAUO,IAAV,CAAe,EAAf,EAAmBC,OAAnB,CAA2B,KAA3B,EAAkC,EAAlC,CAAP;AACD;;AAED;AAAC,OACC,CAACX,IAAI,CAACY,IAAN,EAAYN,KAAZ,CADD,EAEC,WAAIN,IAAI,CAACY,IAAT,YAAsBL,IAAtB,CAFD,EAGCM,OAHD,CAGS,gBAAmB;AAAA;AAAA,YAAjBD,IAAiB;AAAA,YAAXE,KAAW;;AAC3BhB,QAAAA,KAAK,CAACiB,UAAN,CAAiBf,IAAjB,EAAuBY,IAAvB,EAA6BE,KAA7B;AACD,OALA;AAOD,aAAOE,SAAP;AACD;;;;EAxByBpB,W;;AA2B5BG,aAAa,CAACkB,KAAd,GAAsB,CAAC,UAAD,EAAa,aAAb,CAAtB;AAEAC,MAAM,CAACC,OAAP,GAAiBpB,aAAjB","sourcesContent":["let Declaration = require('../declaration')\nlet utils = require('./grid-utils')\n\nclass GridRowColumn extends Declaration {\n  /**\n   * Translate grid-row / grid-column to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let values = utils.parse(decl)\n    let [start, span] = utils.translate(values, 0, 1)\n\n    let hasStartValueSpan = values[0] && values[0].includes('span')\n\n    if (hasStartValueSpan) {\n      span = values[0].join('').replace(/\\D/g, '')\n    }\n\n    ;[\n      [decl.prop, start],\n      [`${decl.prop}-span`, span]\n    ].forEach(([prop, value]) => {\n      utils.insertDecl(decl, prop, value)\n    })\n\n    return undefined\n  }\n}\n\nGridRowColumn.names = ['grid-row', 'grid-column']\n\nmodule.exports = GridRowColumn\n"]},"metadata":{},"sourceType":"script"}