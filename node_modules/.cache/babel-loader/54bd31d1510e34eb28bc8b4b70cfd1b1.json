{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/nasni/Desktop/Illumino/illumino/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar utils = require('./utils');\n\nvar OldValue = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function OldValue(unprefixed, prefixed, string, regexp) {\n    _classCallCheck(this, OldValue);\n\n    this.unprefixed = unprefixed;\n    this.prefixed = prefixed;\n    this.string = string || prefixed;\n    this.regexp = regexp || utils.regexp(prefixed);\n  }\n  /**\n   * Check, that value contain old value\n   */\n\n\n  _createClass(OldValue, [{\n    key: \"check\",\n    value: function check(value) {\n      if (value.includes(this.string)) {\n        return !!value.match(this.regexp);\n      }\n\n      return false;\n    }\n  }]);\n\n  return OldValue;\n}();\n\nmodule.exports = OldValue;","map":{"version":3,"sources":["C:/Users/nasni/Desktop/Illumino/illumino/node_modules/autoprefixer/lib/old-value.js"],"names":["utils","require","OldValue","unprefixed","prefixed","string","regexp","value","includes","match","module","exports"],"mappings":";;;;AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;IAEMC,Q;;;AACJ,oBAAYC,UAAZ,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkD;AAAA;;AAChD,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAM,IAAID,QAAxB;AACA,SAAKE,MAAL,GAAcA,MAAM,IAAIN,KAAK,CAACM,MAAN,CAAaF,QAAb,CAAxB;AACD;AAED;AACF;AACA;;;;;WACE,eAAMG,KAAN,EAAa;AACX,UAAIA,KAAK,CAACC,QAAN,CAAe,KAAKH,MAApB,CAAJ,EAAiC;AAC/B,eAAO,CAAC,CAACE,KAAK,CAACE,KAAN,CAAY,KAAKH,MAAjB,CAAT;AACD;;AACD,aAAO,KAAP;AACD;;;;;;AAGHI,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["let utils = require('./utils')\n\nclass OldValue {\n  constructor(unprefixed, prefixed, string, regexp) {\n    this.unprefixed = unprefixed\n    this.prefixed = prefixed\n    this.string = string || prefixed\n    this.regexp = regexp || utils.regexp(prefixed)\n  }\n\n  /**\n   * Check, that value contain old value\n   */\n  check(value) {\n    if (value.includes(this.string)) {\n      return !!value.match(this.regexp)\n    }\n    return false\n  }\n}\n\nmodule.exports = OldValue\n"]},"metadata":{},"sourceType":"script"}